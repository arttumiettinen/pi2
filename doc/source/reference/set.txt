.. _set:

set
***

There are 5 forms of this command.

:code:`set(name, value)`
========================

Sets value of a string variable

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

name [output]
~~~~~~~~~~~~~

**Data type:** string

Variable to set.

value [input]
~~~~~~~~~~~~~

**Data type:** string

New value.

See also
--------

:ref:`set`, :ref:`clear`

:code:`set(target image, source image)`
=======================================

Copies pixel values from the source image to the target image. Sets the size and data type of the target image to those of the source image. See also :ref:`copy` command.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

target image [output]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image, complex32 image

Image whose values are set.

source image [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image, complex32 image

Image that is copied to the target image.


:code:`set(image, x)`
=====================

Sets all pixels to the same value.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image to process.

x [input]
~~~~~~~~~

**Data type:** real

Pixel value.


:code:`set(image, position, value, block origin)`
=================================================

Sets a pixel in the image.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image to process.

position [input]
~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Position to set.

value [input]
~~~~~~~~~~~~~

**Data type:** real

Value that the pixel at given position should be set to.

block origin [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[0, 0, 0]"

Origin of current calculation block in coordinates of the full image. This argument is used internally in distributed processing. Set to zero in normal usage.

See also
--------

:ref:`line`, :ref:`capsule`, :ref:`sphere`, :ref:`ellipsoid`, :ref:`set`, :ref:`get`, :ref:`ramp`, :ref:`ramp3`

:code:`set(image, positions, values)`
=====================================

Sets values of multiple pixels in an image. Points outside of the image are not set.

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image where the pixels are set.

positions [input]
~~~~~~~~~~~~~~~~~

**Data type:** float32 image

Positions of pixels to set. Each row of this image contains (x, y, z) coordinates of a pixel to be set. The size of the image must be 3xN where N is the count of pixels to write. Floating point values are rounded to the nearest integer.

values [input]
~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Values of the pixels to be set. The size of the image must be the number of pixels to set.

See also
--------

:ref:`set`, :ref:`set`, :ref:`getpointsandlines`
