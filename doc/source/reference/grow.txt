.. _grow:

grow
****

There are 2 forms of this command.

:code:`grow(image, source color, target color, connectivity)`
=============================================================

Grows regions with source color to regions with target color as much as possible.

This command can be used in the distributed processing mode. Use :ref:`distribute` command to change processing mode from local to distributed.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image to process.

source color [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** real

Color that defines regions that are going to be grown.

target color [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** real

Color where the regions will grow.

connectivity [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** connectivity

**Default value:** Nearest

Connectivity of the regions to grow. Can be Nearest for connectivity to nearest neighbours only, or All for connectivity to all neighbours.

See also
--------

:ref:`grow`, :ref:`growlabels`, :ref:`floodfill`, :ref:`regionremoval`, :ref:`morphorec`

:code:`grow(image, parameter image)`
====================================

Grows regions from seed points outwards. Seeds points are all nonzero pixels in the input image, pixel value defining region label. Each seed is grown towards surrounding zero pixels. Fill priority for each pixel is read from the corresponding pixel in the parameter image. Pixels for which priority is zero or negative are never filled. This process is equal to Meyer's watershed algorithm for given set of seeds, and watershed cuts are borders between filled regions in the output image.

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

image [input & output]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Image to process.

parameter image [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, float32 image, int8 image, int16 image, int32 image, int64 image

Parameter image.

See also
--------

:ref:`grow`, :ref:`growlabels`, :ref:`floodfill`, :ref:`regionremoval`, :ref:`morphorec`
