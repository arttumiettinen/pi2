.. _blockmatch:

blockmatch
**********

There are 4 forms of this command.

:code:`blockmatch(reference image, deformed image, xmin, xmax, xstep, ymin, ymax, ystep, zmin, zmax, zstep, initial shift, file name prefix, comparison radius, subpixel accuracy)`
===================================================================================================================================================================================

Calculates displacement field between two images. NOTE: This command is deprecated as it forcibly saves the results to disk. Consider using the version with output to variables.

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

reference image [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Reference image (non-moving image).

deformed image [input]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Deformed image (image to register to non-moving image).

xmin [input]
~~~~~~~~~~~~

**Data type:** integer

X-coordinate of the first calculation point in the reference image.

xmax [input]
~~~~~~~~~~~~

**Data type:** integer

X-coordinate of the last calculation point in the reference image.

xstep [input]
~~~~~~~~~~~~~

**Data type:** integer

Step between calculation points in x-direction.

ymin [input]
~~~~~~~~~~~~

**Data type:** integer

Y-coordinate of the first calculation point in the reference image.

ymax [input]
~~~~~~~~~~~~

**Data type:** integer

Y-coordinate of the last calculation point in the reference image.

ystep [input]
~~~~~~~~~~~~~

**Data type:** integer

Step between calculation points in y-direction.

zmin [input]
~~~~~~~~~~~~

**Data type:** integer

Z-coordinate of the first calculation point in the reference image.

zmax [input]
~~~~~~~~~~~~

**Data type:** integer

Z-coordinate of the last calculation point in the reference image.

zstep [input]
~~~~~~~~~~~~~

**Data type:** integer

Step between calculation points in z-direction.

initial shift [input]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component real vector

Initial shift between the images.

file name prefix [input]
~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** string

Prefix (and path) of files to write. The command will save point grid in the reference image, corresponding points in the deformed image, and goodness-of-fit. If the files exists, the current contents are erased.

comparison radius [input]
~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[25, 25, 25]"

Radius of comparison region.

subpixel accuracy [input]
~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** string

**Default value:** centroid

Subpixel accuracy mode. Can be 'none', 'quadratic', or 'centroid'.

See also
--------

:ref:`blockmatch`, :ref:`blockmatchmemsave`, :ref:`pullback`, :ref:`pointstodeformed`

:code:`blockmatch(reference image, deformed image, x grid, y grid, z grid, initial shift, file name prefix, coarse comparison radius, coarse binning, fine comparison radius, fine binning, subpixel accuracy)`
===============================================================================================================================================================================================================

Calculates displacement field between two images with two-step multi-resolution approach, where coarse displacement is first calculated with larger block size (and binning) and the result is refined in second phase with smaller block size (and binning). NOTE: This command is deprecated as it forcibly saves the results to disk. Consider using the version with output to variables.

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

reference image [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Reference image (non-moving image).

deformed image [input]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Deformed image (image to register to non-moving image).

x grid [input]
~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Calculation point grid definition in X-direction. The format is [start coordinate, end coordinate, step].

y grid [input]
~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Calculation point grid definition in Y-direction. The format is [start coordinate, end coordinate, step].

z grid [input]
~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Calculation point grid definition in Z-direction. The format is [start coordinate, end coordinate, step].

initial shift [input]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component real vector

Initial shift between the images.

file name prefix [input]
~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** string

Prefix (and path) of files to write. The command will save point grid in the reference image, corresponding points in the deformed image, and goodness-of-fit. If the files exists, the current contents are erased.

coarse comparison radius [input]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[25, 25, 25]"

Radius of comparison region for coarse matching.

coarse binning [input]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** positive integer

**Default value:** 2

Amount of resolution reduction in coarse matching phase.

fine comparison radius [input]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[10, 10, 10]"

Radius of comparison region for fine (full-resolution) matching.

fine binning [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** positive integer

**Default value:** 1

Amount of resolution reduction in fine matching phase. Set to same value than coarse binning to skip fine matching phase.

subpixel accuracy [input]
~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** string

**Default value:** centroid

Subpixel accuracy mode. Can be 'none', 'quadratic', or 'centroid'.

See also
--------

:ref:`blockmatch`, :ref:`blockmatchmemsave`, :ref:`pullback`, :ref:`pointstodeformed`

:code:`blockmatch(reference image, deformed image, grid start, grid step, grid max, x, y, z, initial shift, comparison radius, subpixel accuracy)`
==================================================================================================================================================

Calculates displacement field between two images.

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

reference image [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Reference image (non-moving image).

deformed image [input]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Deformed image (image to register to non-moving image).

grid start [input]
~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Start of reference point grid in the coordinates of the reference image.

grid step [input]
~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Grid step in each coordinate direction.

grid max [input]
~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

End of reference point grid in the coordinates of the reference image. The grid will contain floor((max - start) / step) + 1 points in each coordinate direction. Difference between maximum and minimum does not need to be divisible by step.

x [output]
~~~~~~~~~~

**Data type:** float32 image

At output, contains the estimated X-coordinate of each reference grid point in the coordinates of the deformed image. Dimensions of this image are set to point counts in the reference grid.

y [output]
~~~~~~~~~~

**Data type:** float32 image

At output, contains the estimated Y-coordinate of each reference grid point in the coordinates of the deformed image. Dimensions of this image are set to point counts in the reference grid.

z [output]
~~~~~~~~~~

**Data type:** float32 image

At output, contains the estimated Z-coordinate of each reference grid point in the coordinates of the deformed image. Dimensions of this image are set to point counts in the reference grid.

initial shift [input]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component real vector

Initial shift between the images.

comparison radius [input]
~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[25, 25, 25]"

Radius of comparison region.

subpixel accuracy [input]
~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** string

**Default value:** centroid

Subpixel accuracy mode. Can be 'none', 'quadratic', or 'centroid'.

See also
--------

:ref:`blockmatch`, :ref:`blockmatchmemsave`, :ref:`pullback`, :ref:`pointstodeformed`

:code:`blockmatch(reference image, deformed image, grid start, grid step, grid max, x, y, z, initial shift, coarse comparison radius, coarse binning, fine comparison radius, fine binning, subpixel accuracy)`
===============================================================================================================================================================================================================

Calculates displacement field between two images with two-step multi-resolution approach, where coarse displacement is first calculated with larger block size (and binning) and the result is refined in second phase with smaller block size (and binning).

This command cannot be used in the distributed processing mode. If you need it, please contact the authors.

Arguments
---------

reference image [input]
~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Reference image (non-moving image).

deformed image [input]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** uint8 image, uint16 image, uint32 image, uint64 image, int8 image, int16 image, int32 image, int64 image, float32 image

Deformed image (image to register to non-moving image).

grid start [input]
~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Start of reference point grid in the coordinates of the reference image.

grid step [input]
~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

Grid step in each coordinate direction.

grid max [input]
~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

End of reference point grid in the coordinates of the reference image. The grid will contain floor((max - start) / step) + 1 points in each coordinate direction. Difference between maximum and minimum does not need to be divisible by step.

x [output]
~~~~~~~~~~

**Data type:** float32 image

At output, contains the estimated X-coordinate of each reference grid point in the coordinates of the deformed image. Dimensions of this image are set to point counts in the reference grid.

y [output]
~~~~~~~~~~

**Data type:** float32 image

At output, contains the estimated Y-coordinate of each reference grid point in the coordinates of the deformed image. Dimensions of this image are set to point counts in the reference grid.

z [output]
~~~~~~~~~~

**Data type:** float32 image

At output, contains the estimated Z-coordinate of each reference grid point in the coordinates of the deformed image. Dimensions of this image are set to point counts in the reference grid.

initial shift [input]
~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component real vector

Initial shift between the images.

coarse comparison radius [input]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[25, 25, 25]"

Radius of comparison region for coarse matching.

coarse binning [input]
~~~~~~~~~~~~~~~~~~~~~~

**Data type:** positive integer

**Default value:** 2

Amount of resolution reduction in coarse matching phase.

fine comparison radius [input]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** 3-component integer vector

**Default value:** "[10, 10, 10]"

Radius of comparison region for fine (full-resolution) matching.

fine binning [input]
~~~~~~~~~~~~~~~~~~~~

**Data type:** positive integer

**Default value:** 1

Amount of resolution reduction in fine matching phase. Set to same value than coarse binning to skip fine matching phase.

subpixel accuracy [input]
~~~~~~~~~~~~~~~~~~~~~~~~~

**Data type:** string

**Default value:** centroid

Subpixel accuracy mode. Can be 'none', 'quadratic', or 'centroid'.

See also
--------

:ref:`blockmatch`, :ref:`blockmatchmemsave`, :ref:`pullback`, :ref:`pointstodeformed`
